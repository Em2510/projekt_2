# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaProjektDialog
                                 A QGIS plugin
 obliczanie pola i różnicy wysokości
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by E.S.,D.G.
        email                : 01169919@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import *


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'projekt_2_dialog_base.ui'))


class WtyczkaProjektDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaProjektDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.pushButton_wysokosc.clicked.connect(self.policz_wysokosc)
        self.pushButton_pole.clicked.connect(self.policz_pole)
        
        
    def policz_wysokosc(self):
        layer = iface.activeLayer()
        selected = layer.selectedFeatures()
        if len(selected) != 2:
            iface.messageBar().pushMessage('Błąd', 'Wybierz dokładnie 2 punkty.', level=Qgis.Warning)
            return    
        PKT1 = selected[0].geometry().asPoint()
        PKT2 = selected[1].geometry().asPoint()
        roznica = abs(PKT1.z() -PKT2.z())
        iface.messageBar().pushMessage("Wynik",  f"Różnica wysokości między punktami o numerach {PKT1.id()}, {PKT2.id()} wynosi: {roznica} [m]", level=Qgis.Info)
        
        
    def policz_pole(self):
        layer = iface.activeLayer()
        selected = layer.selectedFeatures()
        if len(selected) <  3:
            iface.messageBar().pushMessage('Błąd', 'Wybierz co najmniej 3 punkty.', level=Qgis.Warning)
            return   
        x = selected[0].geometry()
        temp_geom = []
        xy = []
        multi_geom = x.asMultiPolygon()

        for i in multi_geom:
            for j in i: 
                temp_geom.extend(j)

        for point in temp_geom:
            xy.append([point.x(), point.y()])

        geo = QgsGeometry.fromPolygonXY([xy])
        pole = geo.area()
        iface.messageBar().pushMessage("Wynik", f"Pole powierzchni figury o wierzchołkach w punktach: {punkty} wynosi: {pole} m²", level=Qgis.Info)
        
    def main():
        layer = iface.activeLayer()
        
        if layer is None:
            iface.messageBar().pushMessage('Błąd', 'Nie wybrano warstwy.', level=Qgis.Warning)
            return
        
        selected_features = layer.selectedFeatures()
        
        if len(selected_features) < 2:
            iface.messageBar().pushMessage('Błąd', 'Wybierz co najmniej 2 punkty.', level=Qgis.Warning)
            return
        
        if len(selected_features) == 2:
            calculate_height_difference()
        else:
            calculate_area()


    main()        
            